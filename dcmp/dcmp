#!/usr/bin/env sh

set -e

# Global Variables
# Manually assign here or in a configuration file located in:
# ~/.dcmp
# ~/.config/dcmp.conf
# /usr/local/etc/dcmp.conf
# /etc/dcmp.conf

config_file=""
docker_compose_bin=""
working_dir=""
verbose=true

########################################
# Colors and Time
########################################
tchron="$(date "+%Y-%m-%d %H:%M:%S")"
tgreen="\033[32m"
tred="\033]31m"
tbold="\033[1m"
treset="\033[m"

########################################
# Functions
########################################

get_conf() {
    __conf_array="
    $HOME/.dcmp
    $HOME/.config/dcmp.conf
    /usr/local/etc/dcmp.conf
    /etc/dcmp.conf
    "
       while read -r __config_file; do 
        for __conf in "$__config_file"; do
            if [ -r "$__conf" ]; then
                printf "%s\n" "$__conf" && return
            fi
        done
    done << EOF
$(printf "%s" "$__conf_array")
EOF
}

dep_check() {
    # Check for configuration
    if [ -n "$config_file" ]; then
        _config="$config_file"
    else
        _config="$(get_conf)"
    fi

    if [ -r "$_config" ]; then
        . "$_config"
    elif "$verbose"; then
        echo "Error. Cannot find configuration."
    fi

    # Check for docker-compose binary
    if ! $docker_compose_bin version >/dev/null 2>&1; then
        echo "Error. Cannot find docker compose."
        return 1
    fi

    # Check for rsync binary
    if [ ! -x $(command -v rsync) ]; then
        echo "Error. rsync not found."
        return 1
    fi

    # Check for working directory
    if [ -z "$working_dir" ]; then
        echo "Error. working_dir is null."
        return 1
    elif [ ! -d "$working_dir" ]; then
        echo "Error. Cannot find working dir: $working_dir"
        return 1
    fi
}

main() {
    __backup_dir=""
    case $1 in
        --backup)
            if [ -z "$2" ]; then
                echo "Error: backup directory not specified"
                exit 1
            fi
            __backup_dir="$2" 
            ;;
    esac
    for _dir in $(find $working_dir/ -maxdepth 1 -mindepth 1 -type d); do
        for _compose_file in $(find $_dir/ -maxdepth 1 -mindepth 1 -type f); do
            case "$_compose_file" in
                *compose.yml)
                    if "$verbose"; then
                        printf "%b[%s]:%b\n" "$tbold" "$tchron" "$treset"
                    fi
                    if [ -n "$__backup_dir" ]; then
                        echo "Backing up $_dir to $__backup_dir..."

                        # Pause the docker compose
                        $docker_compose_bin --project-directory $_dir pause

                        # Move into working directory
                        cd "$working_dir"

                        # Check for rsync exclusions
                        if [ -f "${_dir}/rsync_exclude" ]; then
                            $(command -v rsync) -avH \
                                --exclude-from ${_dir}/rsync_exclude \
                                $(basename "$_dir") "$__backup_dir"
                        else
                            $(command -v rsync) -avH \
                                $(basename "$_dir") "$__backup_dir"
                        fi
                        # Unpause docker compose
                        $docker_compose_bin --project-directory $_dir unpause

                    else
                        # Check if plex is playing
                        if [ -x "${_dir}/plex_is_playing.sh" ]; then
                            if ${_dir}/plex_is_playing.sh; then
                                printf "Plex is playing, skipping.\n"
                                continue
                            fi
                        fi
                        # Normal docker compose commands
                        $docker_compose_bin --project-directory $_dir $*
                    fi
            esac
        done
    done
}

# Dependency check
dep_check || exit

# Start main program
main $@
