#!/usr/bin/env sh
# shellcheck disable=SC2044

set -e

DCMP_PRGNAM="dcmp"
DCMP_VERSION="0.1"

# Global Configuration
# Manually assign here or in a configuration file located in:
# ~/.dcmp
# ~/.config/dcmp.conf
# /usr/local/etc/dcmp.conf
# /etc/dcmp.conf

# DCMP_CONFIG="" # optional

# Global configuration settings
DCMP_DOCKER_COMPOSE_BIN=""
DCMP_RSYNC_BIN=""
DCMP_RSYNC_FLAGS="-aH"
DCMP_RSYNC_NAME="$(date +%Y%m%d)"
DCMP_WORKING_DIR="" 
DCMP_BACKUP_DIR=""
DCMP_SKIP_SCRIPT=""
DCMP_VERBOSE=true # boolean

# Runtime configuration settings
DCMP_CWD="$PWD"

########################################
# Functions
########################################

show_usage() {
    cat << EOF
    $DCMP_PRGNAM -- $DCMP_VERSION

    dcmp <docker compose command>
    dcmp --config /path/to/config <docker compose command>
    dcmp --working-dir /path/to/compose_dir --verbose true <docker compose command>
    dcmp --backup --backup-dir /path/to/backup_dir

EOF
}

log_this() {
    __green="\033[32m"
    __red="\033[31m"
    __bold="\033[1m"
    __reset="\033[m"
    __date="$(date "+%Y-%m-%d %H:%M:%S")"
    __message_color="$__green"

    case "$*" in
        *Error*|*error*) __message_color="$__red" ;;
    esac

    printf "%b%b[%s] [%s]: %s%b\n" \
        "$__bold" \
        "$__message_color" \
        "$DCMP_PRGNAM" \
        "$__date" \
        "$*" \
        "$__reset"
}

get_global_config() {
    __conf_array="
    $HOME/.dcmp
    $HOME/.config/dcmp.conf
    /usr/local/etc/dcmp.conf
    /etc/dcmp.conf
    "
    # Check for global conf
    if [ -n "$DCMP_GLOBAL_CONF" ]; then
        printf "%s\n" "$DCMP_GLOBAL_CONF" && return
    fi

    # Check for config file in __conf_array
    while read -r __config_file; do 
        if [ -r "$__config_file" ]; then
            printf "%s\n" "$__config_file" && return
        fi
    done << EOF
$(printf "%s" "$__conf_array")
EOF

    # Return error if no configuration found
    return 1
}

get_local_config() {
    __project_dir="$1"
    __conf_array="
    ${__project_dir}/.dcmp.local
    ${__project_dir}/dcmp.local
    ${__project_dir}/dcmp.local.conf
    ${__project_dir}/.dcmp
    ${__project_dir}/dcmp.conf
    "

    # Check for config file in __conf_array
    while read -r __config_file; do 
        if [ -r "$__config_file" ]; then
            printf "%s\n" "$__config_file" && return
        fi
    done << EOF
$(printf "%s" "$__conf_array")
EOF
}

get_docker_compose_bin() {
    if [ -x "$DCMP_DOCKER_COMPOSE_BIN" ]; then
        printf "%s\n" "$DCMP_DOCKER_COMPOSE_BIN"
    elif $(command -v docker) compose version >/dev/null; then
        printf "%s compose\n" "$(command -v docker)"
    elif [ -x "$(command -v docker-compose)" ]; then
        printf "%s\n" "$(command -v docker-compose)"
    else
        return 1
    fi
}

get_rsync_bin() {
    if [ -x "$DCMP_RSYNC_BIN" ]; then
        printf "%s\n" "$DCMP_RSYNC_BIN"
    elif [ -x $(command -v rsync) ]; then
        printf "%s\n" "$(command -v rsync)"
    else
        return 1
    fi
}

get_container_dirs() {
    __working_dir="$1"
    for __dir in $(find $__working_dir/ -maxdepth 1 -mindepth 1 -type d); do
        printf "%s " "$__dir"
    done
}

get_hashbang() {
    __hashbang="$(head -n 1 $1)"
    case "$__hashbang" in 
        \#\!*)
            printf "%s\n" "${__hashbang#\#\!}"
            return ;;
    esac
    return 1
}

compose_check() {
    __working_dir="$1"
    for __compose in $(find $__working_dir/ -maxdepth 1 -mindepth 1 -type f); do
        case "$__compose" in
            *compose.yml|*compose.yaml)
                printf "%s\n" "$__compose"
                return ;;
        esac
    done
}

dcmp_backup() {
    __docker_compose_bin="$1"
    __rsync_bin="$2"
    __working_dir="$3"
    __project_dir="$4"
    __local_backup_dir="$5"
    __local_verbose="$6"
    __local_rsync_flags="$7"
    __local_rsnyc_name="$8"

    if "$__verbose"; then
    log_this "Backing up $__project_dir to $__local_backup_dir"
    fi

    # Pause the docker compose
    $__docker_compose_bin --project-directory $__project_dir pause

    # Move to working directory for rsync
    cd "$__working_dir" || exit

    # Check for rsync exclusions
    if [ -r "${__project_dir}/dcmp_exclude" ]; then
        if "$__verbose"; then
            log_this "Found dcmp_exclude in $__project_dir."
        fi
        $__rsync_bin "$__local_rsync_flags" \
            --exclude-from ${__project_dir}/dcmp_exclude \
            "$(basename $__project_dir)" "${__local_backup_dir}/${__local_rsync_name}-$(basename $__project_dir)"
    else
        $__rsync_bin "$__local_rsync_flags" \
            "$(basename $__project_dir)" "${__local_backup_dir}/${__local_rsync_name}-$(basename $__project_dir)"
     fi

    # Unpause docker compose
    $__docker_compose_bin --project-directory $__project_dir unpause

}

dcmp_standard() {
    __docker_compose_bin="$1"
    __project_dir="$2"
    __command_args="$3"
    __verbose="$4"
    
    if "$__verbose"; then
        log_this "Issuing \"$__command_args\" in $__project_dir"
    fi

    $__docker_compose_bin \
        --project-directory \
        $__project_dir \
        $__command_args

}

main() {

    # Get docker compose command
    __docker_compose_bin="$(get_docker_compose_bin)"
    if ! $__docker_compose_bin >/dev/null 2>&1; then
        log_this "Error: docker compose not installed?"
        return 1
    fi

    # Get rsync binary
    __rsync_bin="$(get_rsync_bin)"
    if [ ! -x $__rsync_bin ]; then
        log_this "Error: rsync not installed?"
        return 1
    fi

    # Get and source config (if exists)
    __config=$(get_global_config)
    [ -r "$__config" ] && . "$__config"

    # Set global configs
    __working_dir="$DCMP_WORKING_DIR"
    __backup_dir="$DCMP_BACKUP_DIR"
    __skip_script="$DCMP_SKIP_SCRIPT"
    __verbose="$DCMP_VERBOSE"
    __rsync_flags="$DCMP_RSYNC_FLAGS"
    __rsync_name="$DCMP_RSYNC_NAME"

    # Runtime config
    __local_config=""
    __command_args=""
    __backup_mode=""
    __force_skip=false

    # Parse runtime args
    while [ "$#" -gt 0 ]; do
        case $1 in
            --backup)
                __backup_mode=yes
                shift ;;
            --backup-dir)
                __backup_dir="$2"
                shift 2 ;;
            --config)
                if [ -r "$2" ]; then
                    # Source configuration
                    . "$2"
                else
                    printf "Error: %s not found.\n" "$2" 
                    exit 1
                fi
                shift 2 ;;
            --force)
                __force_skip=true
                shift ;;
            --help|--usage)
                show_usage && exit ;;
            --rsync-flags)
                __rsync_flags="$2"
                shift 2 ;;
            --rsync-name)
                __rsync_name="$2"
                shift 2 ;;
            --skip-script)
                __skip_script="$2"
                shift 2 ;;
            --verbose)
                __verbose="$2"
                shift 2 ;;
            --working-dir)
                __working_dir="$2"
                shift 2 ;;
            *)
                if [ -z "$__command_args" ]; then
                    __command_args="$1"
                else
                    __command_args="${__command_args} $1"
                fi
                shift ;;
        esac
    done

    # Working directory is a requirement; default is current working dir
    if [ -z "$__working_dir" ]; then
        __working_dir="$DCMP_CWD"
    fi

    # Get container dirs from working dir
    __container_dir="$(get_container_dirs $__working_dir)"

    # Confirm it is a docker compose project directory, then run program
    __project_dir="" # Clear project dir
    for __project_dir in $__container_dir; do
        
        # Project-only vars
        __local_project_name="$(basename $__project_dir)"
        __local_backup_dir=""
        __local_skip_script=""
        __local_verbose=""
        __local_rsync_flags=""
        __local_rsync_name=""

        # Check if compose file exists, move on if not
        __compose_file="$(compose_check $__project_dir)"
        [ -e "$__compose_file" ] || continue

        # Check for local configuration
        __local_config="$(get_local_config $__project_dir)"

        # Source local configuration if exists
        if [ -r "$__local_config" ]; then
            . "$__local_config" # Source local config
            __local_skip_script="${DCMP_SKIP_SCRIPT:-$__skip_script}"
            __local_backup_dir="${DCMP_BACKUP_DIR:-$__backup_dir}"
            __local_verbose="${DCMP_VERBOSE:-$__verbose}"
            __local_rsync_flags="${DCMP_RSYNC_FLAGS:-$__rsync_flags}"
            __local_rsync_name="${DCMP_RSYNC_NAME:-$__rsync_name}"
        else
            __local_skip_script="$__skip_script"
            __local_backup_dir="$__backup_dir"
            __local_verbose="$__verbose"
            __local_rsync_flags="$__rsync_flags"
            __local_rsync_name="$__rsync_name"
        fi

        # Check if skip script exists and run it
        if ! "$__force_skip"; then
            if [ -r "$__local_skip_script" ]; then
                __command_exec="$(get_hashbang "$__local_skip_script")"
                if [ -z "$__command_exec" ]; then
                    log_this \
                        "Error: skip script in $__local_project_name invalid."
                return 1
                else
                    if $__command_exec "$__local_skip_script"; then
                        "$__local_verbose" && log_this \
                            "Skipping $__local_project_name"
                        continue # restart the for loop, skipping this project
                    fi
                fi
            fi
        fi

        ### This is it! Run commands...

        # Check if backup mode 
        if [ -n "$__backup_mode" ]; then

            # Set backup directory to default if not exists
            [ -n "$__backup_dir" ] || __backup_dir="${__project_dir}/backup"

            # Let's back 'em up!
            dcmp_backup \
                "$__docker_compose_bin" \
                "$__rsync_bin" \
                "$__working_dir" \
                "$__project_dir" \
                "$__local_backup_dir" \
                "$__local_verbose" \
                "$__local_rsync_flags" \
                "$__local_rsync_name"

        else # Normal docker compose commands

            dcmp_standard \
                "$__docker_compose_bin" \
                "$__project_dir" \
                "$__command_args" \
                "$__local_verbose"
            
        fi

    done
}

# shellcheck disable=2068
main $@
