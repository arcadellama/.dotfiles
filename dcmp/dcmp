#!/usr/bin/env sh
# shellcheck disable=SC2044

#set -e

PRGNAM="dcmp"
VERSION="0.1"

# Global Configuration
# Manually assign here or in a configuration file located in:
# ~/.dcmp
# ~/.config/dcmp.conf
# /usr/local/etc/dcmp.conf
# /etc/dcmp.conf

# DCMP_CONFIG="" # optional

# Global configuration settings
DCMP_DOCKER_COMPOSE_BIN=""
DCMP_RSYNC_BIN=""
DCMP_RSYNC_PRE_FLAGS="-aH"
DCMP_RSYNC_POST_FLAGS="--delete-delay"
DCMP_WORKING_DIR="" 
DCMP_BACKUP_DIR=""
DCMP_SKIP_SCRIPT=""
DCMP_VERBOSE=true # boolean

# Runtime configuration settings
DCMP_CWD="$PWD"

########################################
# Functions
########################################

show_usage() {
    cat << EOF
    $PRGNAM -- $VERSION

    dcmp <docker compose command>
    dcmp --config /path/to/config <docker compose command>
    dcmp --working-dir /path/to/compose_dir --verbose true <docker compose command>
    dcmp --backup --backup-dir /path/to/backup_dir

EOF
}

log_this() {
    # Usage: log_this <type> <message>
    # Message types:
    # default <blank>
    # success
    # error
    # warn

    __default_color="\033[39m"
    __orange="\033[33m"
    __green="\033[32m"
    __red="\033[31m"
    __bold="\033[1m"
    __reset="\033[m"
    __date="$(date "+%Y-%m-%d %H:%M:%S")"
    __header_color="$__default_color"
    __message_header="[${__date}] [${PRGNAM}]"
    __visible=false

    case "$1" in
        error)
            __message_header="${__message_header} [ERROR]"
            __header_color="$__red"
            __visible=true
            shift ;;
        success)
            __message_header="${__message_header} [SUCCESS]"
            __header_color="$__green"
            "$DCMP_VERBOSE" &&  __visible=true
            shift ;;
        warn|warning)
            __message_header="${__message_header} [WARN]"
            __header_color="$__orange"
            "$DCMP_VERBOSE" && __visible=true
            shift ;;
        *) "$DCMP_VERBOSE" &&  __visible=true ;;
    esac

    if "$__visible"; then
        printf "%b%b%s: %b%b%s%b\n" \
            "$__bold" \
            "$__header_color" \
            "$__message_header" \
            "$__reset" \
            "$__bold" \
            "$*" \
            "$__reset"
    fi
}

get_global_config() {
    __conf_array="
    $HOME/.dcmp
    $HOME/.config/dcmp.conf
    /usr/local/etc/dcmp.conf
    /etc/dcmp.conf
    "
    # Check for global conf
    if [ -n "$DCMP_GLOBAL_CONF" ]; then
        printf "%s\n" "$DCMP_GLOBAL_CONF" && return
    fi

    # Check for config file in __conf_array
    while read -r __config_file; do 
        if [ -r "$__config_file" ]; then
            printf "%s\n" "$__config_file" && return
        fi
    done << EOF
$(printf "%s" "$__conf_array")
EOF

    # Return error if no configuration found
    return 1
}

get_local_config() {
    __project_dir="$1"
    __conf_array="
    ${__project_dir}/.dcmp.local
    ${__project_dir}/dcmp.local
    ${__project_dir}/dcmp.local.conf
    ${__project_dir}/.dcmp
    ${__project_dir}/dcmp.conf
    "

    # Check for config file in __conf_array
    while read -r __config_file; do 
        if [ -r "$__config_file" ]; then
            printf "%s\n" "$__config_file" && return
        fi
    done << EOF
$(printf "%s" "$__conf_array")
EOF
}

get_docker_compose_bin() {
    if [ -x "$DCMP_DOCKER_COMPOSE_BIN" ]; then
        printf "%s\n" "$DCMP_DOCKER_COMPOSE_BIN"
    elif $(command -v docker) compose version >/dev/null; then
        printf "%s compose\n" "$(command -v docker)"
    elif [ -x "$(command -v docker-compose)" ]; then
        printf "%s\n" "$(command -v docker-compose)"
    else
        return 1
    fi
}

get_rsync_bin() {
    if [ -x "$DCMP_RSYNC_BIN" ]; then
        printf "%s\n" "$DCMP_RSYNC_BIN"
    elif [ -x $(command -v rsync) ]; then
        printf "%s\n" "$(command -v rsync)"
    else
        return 1
    fi
}

get_container_dirs() {
    __working_dir="$1"
    for __dir in $(find $__working_dir/ -maxdepth 1 -mindepth 1 -type d); do
        printf "%s " "$__dir"
    done
}

compose_check() {
    __working_dir="$1"
    for __compose in $(find $__working_dir/ -maxdepth 1 -mindepth 1 -type f); do
        case "$__compose" in
            *compose.yml|*compose.yaml)
                printf "%s\n" "$__compose"
                return ;;
        esac
    done
}

dcmp_backup() {
    __docker_compose_bin="$1"
    __rsync_bin="$2"
    __working_dir="$3"
    __project_dir="$4"
    __local_backup_dir="${5%/}" # remove any trailing slashes, will add later
    __local_rsync_pre_flags="$6"
    __local_rsync_post_flags="$7"
    __retval=""

    log_this "Pausing $__project_dir..."

    # Pause the docker compose
    if $__docker_compose_bin --project-directory $__project_dir pause; then
        log_this success "Paused $(basename $__project_dir)."
    else
        log_this error "Unable to pause $__project_dir. Error code: $?"
    fi

    # Move to working directory for rsync
    cd "$__working_dir"

    # Check for rsync exclusions
    if [ -r "${__project_dir}/rsync_exclude" ]; then
        log_this "Found rsync_exclude file in $__project_dir."

        log_this "Trying $__rsync_bin $__local_rsync_pre_flags --exclude from ${__project_dir}/rsync_exclude $(basename $__project_dir) ${__local_backup_dir}/ ${__local_rsync_post_flags}..."

        # Excecute rsync with exclusion file
        $__rsync_bin "$__local_rsync_pre_flags" \
            --exclude-from ${__project_dir}/rsync_exclude \
            "$(basename $__project_dir)" "${__local_backup_dir}/" \
            ${__local_rsync_post_flags}
        __retval="$?"

    else

        log_this "Trying $__rsync_bin $__local_rsync_pre_flags $(basename $__project_dir) ${__local_backup_dir}/ ${__local_rsync_post_flags}..."

        # Excecute rsync 
        log_this $__rsync_bin "$__local_rsync_pre_flags" \
            "$(basename $__project_dir)" "${__local_backup_dir}/" \
            ${__local_rsync_post_flags}
        __retval="$?"

    fi

    if [ "$__retval" -eq 0 ]; then
        log_this success "rsync backup of $(basename $__project_dir) complete."
    else
        log_this error "rsync backup failed. Error code: $__retval."
    fi

    # Unpause docker compose
    if $__docker_compose_bin --project-directory $__project_dir unpause; then
        log_this success "Unpaused $(basename $__project_dir)"
    else
        log_this error "Unable to unpause $__project_dir."
    fi

}

dcmp_standard() {
    __docker_compose_bin="$1"
    __project_dir="$2"
    __command_args="$3"
    
    log_this "Issuing \"$__command_args\" in $__project_dir"

    if $__docker_compose_bin --project-directory $__project_dir $__command_args; then
        log_this success "Done."
    else
        log_this error "Error code: $?"
    fi

}

main() {

    # Get docker compose command
    __docker_compose_bin="$(get_docker_compose_bin)"
    if ! $__docker_compose_bin >/dev/null 2>&1; then
        log_this error "docker compose not installed?"
        return 1
    fi

    # Get rsync binary
    __rsync_bin="$(get_rsync_bin)"
    if [ ! -x $__rsync_bin ]; then
        log_this error "rsync not installed?"
        return 1
    fi

    # Get and source config (if exists)
    __config=$(get_global_config)
    [ -r "$__config" ] && . "$__config"

    # Set global configs
    __working_dir="$DCMP_WORKING_DIR"
    __backup_dir="$DCMP_BACKUP_DIR"
    __skip_script="$DCMP_SKIP_SCRIPT"
    __rsync_pre_flags="$DCMP_RSYNC_PRE_FLAGS"
    __rsync_post_flags="$DCMP_RSYNC_POST_FLAGS"

    # Runtime config
    __local_config=""
    __command_args=""
    __backup_mode=""
    __force_skip=false
    __tmp_output="/tmp/${PRGNAM}_skip"

    # Parse runtime args
    while [ "$#" -gt 0 ]; do
        case $1 in
            --backup)
                __backup_mode=yes
                shift ;;
            --backup-dir)
                __backup_dir="$2"
                shift 2 ;;
            --config)
                if [ -r "$2" ]; then
                    # Source configuration
                    . "$2"
                else
                    printf "Error: %s not found.\n" "$2" 
                    exit 1
                fi
                shift 2 ;;
            --force)
                __force_skip=true
                shift ;;
            --help|--usage)
                show_usage && exit ;;
            --rsync-post-flags)
                __rsync_post_flags="$2"
                shift 2 ;;
            --rsync-pre-flags)
                __rsync_pre_flags="$2"
                shift 2 ;;
            --skip-script)
                __skip_script="$2"
                shift 2 ;;
            --verbose)
                DCMP_VERBOSE="$2"
                shift 2 ;;
            --working-dir)
                __working_dir="$2"
                shift 2 ;;
            *)
                if [ -z "$__command_args" ]; then
                    __command_args="$1"
                else
                    __command_args="${__command_args} $1"
                fi
                shift ;;
        esac
    done

    # Working directory is a requirement; default is current working dir
    if [ -z "$__working_dir" ]; then
        __working_dir="$DCMP_CWD"
    fi

    # Get container dirs from working dir
    __container_dir="$(get_container_dirs $__working_dir)"

    # Confirm it is a docker compose project directory, then run program
    __project_dir="" # Clear project dir
    for __project_dir in $__container_dir; do
        
        # Project-only vars
        __local_project_name="$(basename $__project_dir)"
        __local_backup_dir=""
        __local_skip_script=""
        __local_rsync_pre_flags=""
        __local_rsync_post_flags=""

        # Check if compose file exists, move on if not
        __compose_file="$(compose_check $__project_dir)"
        [ -e "$__compose_file" ] || continue

        # Check for local configuration
        __local_config="$(get_local_config $__project_dir)"

        # Source local configuration if exists
        if [ -r "$__local_config" ]; then
            . "$__local_config" # Source local config
            __local_skip_script="${DCMP_SKIP_SCRIPT:-$__skip_script}"
            __local_backup_dir="${DCMP_BACKUP_DIR:-$__backup_dir}"
            __local_rsync_pre_flags="${DCMP_RSYNC_PRE_FLAGS:-$__rsync_pre_flags}"
            __local_rsync_post_flags="${DCMP_RSYNC_POST_FLAGS:-$__rsync_post_flags}"
        else
            __local_skip_script="$__skip_script"
            __local_backup_dir="$__backup_dir"
            __local_rsync_pre_flags="$__rsync_pre_flags"
            __local_rsync_post_flags="$__rsync_post_flags"
        fi

        # Check if skip script exists and run it
        if [ -n "$__local_skip_script" ] && ! "$__force_skip"; then
            if [ ! -x "$__local_skip_script" ]; then
                    log_this warn \
                        "Skip script in $__local_project_name is not executable." \
                        "Defaulting to skip." \
                        "Try: 'chmod +x $__local_skip_script'"
                     continue
            else
                rm -f "$__tmp_output"
                if "$__local_skip_script" > "$__tmp_output"; then
                        if [ -s "$__tmp_output" ]; then
                            log_this \
                            "Message from $__local_skip_script:" \
                            "$(cat $__tmp_output)" && rm "$__tmp_output"
                        fi
                        log_this "Skipping $__local_project_name."
                        continue # restart the for loop, skipping this project
                else
                        if [ -s "$__tmp_output" ]; then
                            log_this \
                            "Message from $__local_skip_script:" \
                            "$(cat $__tmp_output)" && rm "$__tmp_output"
                        fi
                        log_this "Not skipping $__local_project_name."
                fi
            fi
        fi

        ### This is it! Run commands...

        # Check if backup mode 
        if [ -n "$__backup_mode" ]; then

            # Set backup directory to default if not exists
            [ -n "$__backup_dir" ] || __backup_dir="${__project_dir}/backup"

            # Let's back 'em up!
            dcmp_backup \
                "$__docker_compose_bin" \
                "$__rsync_bin" \
                "$__working_dir" \
                "$__project_dir" \
                "$__local_backup_dir" \
                "$__local_rsync_pre_flags" \
                "$__local_rsync_post_flags" \

        else # Normal docker compose commands

            dcmp_standard \
                "$__docker_compose_bin" \
                "$__project_dir" \
                "$__command_args" \
            
        fi

    done
}

# shellcheck disable=2068
main $@
